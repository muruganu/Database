
name: 'Deploy'

on:
  workflow_dispatch:
    inputs:
      # Terraform action you want to perform
      action:
        description: 'Terraform Action to Perform'
        type: choice
        options:
          - build


jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: test

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
        # Runs the commands using the runners shell
    - name: Prepare environment
      env:
        SSH_PUBKEY: ${{ secrets.SSH_PUBKEY }}
        VAULT_PASS: ${{ secrets.VAULT_PASS }}
        ANSIBLE_VAULT_PASSWORD_FILE: ~/.vault_pass.txt
      run: |
        python3 -m venv /tmp/py3
        source /tmp/py3/bin/activate
        pip install --upgrade pip 
        pip install 'ansible==2.9'
        ansible --version
        curl https://releases.hashicorp.com/terraform/1.2.3/terraform_1.2.3_linux_amd64.zip -o terraform_1.2.3_linux_amd64.zip
        unzip terraform_1.2.3_linux_amd64.zip
        ./terraform --version
        mv terraform /usr/local/bin/

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false
